'use client';

import { useState, useEffect, type ChangeEvent } from 'react';
import { useSearchParams } from 'next/navigation';
import { GameBoard } from '@/components/GameBoard';
import { HistoryList } from '@/components/history/HistoryList';
import { Button } from '@/components/ui/Button';
import { useGameState } from '@/hooks/useGameState';
import { type Difficulty } from '@/lib/game/constants';
import { GameStatus } from '@/types/game';

export default function Home() {
  const [gameStarted, setGameStarted] = useState(false);
  const [selectedDifficulty, setSelectedDifficulty] = useState<Difficulty>('medium');
  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
  const [isLoadingResume, setIsLoadingResume] = useState(false);
  const gameState = useGameState();
  const searchParams = useSearchParams();
  const resumeGameId = searchParams.get('resume');

  // Handle resume game functionality
  useEffect(() => {
    const handleResumeGame = async () => {
      if (resumeGameId && !gameStarted && !isLoadingResume) {
        setIsLoadingResume(true);
        try {
          const success = await gameState.loadIncompleteGame(resumeGameId);
          if (success) {
            setGameStarted(true);
            // Clear the resume parameter from URL
            const url = new URL(window.location.href);
            url.searchParams.delete('resume');
            window.history.replaceState({}, '', url.toString());
          }
        } catch (error) {
          console.error('Failed to resume game:', error);
          alert('Failed to resume the game. Please try again.');
        } finally {
          setIsLoadingResume(false);
        }
      }
    };

    handleResumeGame();
  }, [resumeGameId, gameStarted, isLoadingResume, gameState]);

  const handleDifficultyChange = (event: ChangeEvent<HTMLSelectElement>) => {
    const newDifficulty = event.target.value as Difficulty;
    setSelectedDifficulty(newDifficulty);

    if (gameState.gameState.status !== GameStatus.NOT_STARTED) {
      gameState.updateSettings({ difficulty: newDifficulty });
    }
  };

  const renderDifficultySelector = () => (
    <div className="flex flex-col items-center gap-3 rounded-2xl border border-slate-800 bg-slate-900 px-6 py-5 text-slate-100 shadow-xl">
      <label htmlFor="difficulty" className="text-lg font-semibold uppercase tracking-wide text-slate-200">
        Select Difficulty
      </label>
      <select
        id="difficulty"
        value={selectedDifficulty}
        onChange={handleDifficultyChange}
        className="w-40 rounded-lg border border-slate-700 bg-slate-950 px-4 py-2 text-base font-semibold text-slate-100 shadow-sm transition focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        <option value="easy">Easy</option>
        <option value="medium">Medium</option>
        <option value="hard">Hard</option>
      </select>
    </div>
  );

  const handleColumnClick = (column: number) => {
    gameState.makeMove(column);
  };

  const handleStartGame = () => {
    setGameStarted(true);
    gameState.startNewGame(selectedDifficulty, 'red');
  };

  const handleNewGame = () => {
    gameState.resetGame();
    gameState.startNewGame(selectedDifficulty, 'red');
  };

  const closeHistory = () => setIsHistoryOpen(false);

  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-8">
      <div className="text-center">
        <h1 className="text-6xl font-bold text-blue-600 mb-4">Connect Four</h1>
        <p className="text-xl text-gray-600 mb-8">A classic game with a modern twist</p>
        
        {!gameStarted ? (
          <div className="space-y-6">
            {renderDifficultySelector()}
            <div className="flex flex-col items-center gap-3">
              {isLoadingResume ? (
                <div className="flex items-center gap-2 text-blue-600">
                  <div className="w-4 h-4 animate-spin rounded-full border-2 border-blue-600 border-t-transparent" />
                  <span>Resuming game...</span>
                </div>
              ) : (
                <button
                  onClick={handleStartGame}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200 text-lg"
                >
                  Start Game
                </button>
              )}
              <Button
                variant="outline"
                onClick={() => setIsHistoryOpen(true)}
                className="border-blue-300 text-blue-600 hover:text-blue-700"
              >
                View Game History
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            {renderDifficultySelector()}
            <GameBoard 
              gameState={gameState.gameState} 
              onColumnClick={handleColumnClick}
            />
            <div className="flex gap-4 justify-center">
              <button
                onClick={handleNewGame}
                className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
              >
                New Game
              </button>
              <button
                onClick={() => setGameStarted(false)}
                className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
              >
                Back to Menu
              </button>
              <Button
                variant="outline"
                onClick={() => setIsHistoryOpen(true)}
                className="border-blue-300 text-blue-600 hover:text-blue-700"
              >
                View History
              </Button>
            </div>
          </div>
        )}
      </div>

      {isHistoryOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-slate-950/90 backdrop-blur-sm p-4">
          <div className="relative flex w-full max-w-5xl flex-col overflow-hidden rounded-3xl border border-slate-800 bg-slate-950 text-slate-100 shadow-2xl">
            <div className="flex items-center justify-between border-b border-slate-800 bg-slate-900 px-6 py-4">
              <h2 className="text-2xl font-semibold">Game History</h2>
              <button
                onClick={closeHistory}
                className="rounded-full p-2 text-slate-300 transition hover:bg-slate-800 hover:text-white"
                aria-label="Close history"
              >
                âœ•
              </button>
            </div>
            <div className="max-h-[70vh] overflow-y-auto bg-slate-950 px-6 py-6">
              <HistoryList
                className="mx-auto max-w-4xl"
                onResume={(gameId) => {
                  window.location.href = `/?resume=${gameId}`;
                  setIsHistoryOpen(false);
                }}
              />
            </div>
            <div className="flex items-center justify-end gap-3 border-t border-slate-800 bg-slate-900 px-6 py-4">
              <Button
                variant="outline"
                onClick={closeHistory}
                className="border-slate-700 text-slate-100 hover:bg-slate-800"
              >
                Close
              </Button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}
